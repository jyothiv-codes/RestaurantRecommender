# -*- coding: utf-8 -*-
"""CS276-Project-LinkPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FXzj2PNMuWux-W9vpqGLDNN36-CRUKNv
"""

from google.colab import drive
drive.mount('/content/drive')

import networkx as nx
# https://networkx.org/
G = nx.Graph()
# clears graph
G.clear()

users = open("/content/drive/My Drive/yelp-final-users-cleaned.csv", "r")
users_dict={}
user_mapping={} #key - string id, value - int id
for lines in users:
  #print(lines)
  line=lines.split(",")
  if "\"\"" not in line[1]:
    friends_list=line[1][1:]
    friends_list=friends_list[:-2]
    friends_list=friends_list.split(",")
    for friends in friends_list:
      v=int(friends)
      u=int(line[0])
      if u not in users_dict:
        users_dict[u]=[]
      users_dict[u].append(v)
      if v not in users_dict:
        users_dict[v]=[]
      if u not in users_dict[v]:
        users_dict[v].append(u)
      if v not in users_dict[u]:
        users_dict[u].append(v)


users_with_ratings = open("/content/drive/My Drive/yelp-ratings-cleaned-index.csv", "r")
ur_dict={} #to store the restaurant and their ratings by a particular user

for lines in users_with_ratings:
  line=lines.split(",")
  user_from=int(line[1])
  if user_from in users_dict:
    for values in users_dict[user_from]:
      value=int(values)
      G.add_edge(user_from, value)
    if user_from not in ur_dict:
      ur_dict[user_from]=[]
    restaurant=str(line[2])
    rating=int(line[4])
    pair=[rating,restaurant]
    ur_dict[user_from].append(pair)

print(G.nodes())
print(len(G.edges()))

l=list(G.edges())
l.sort()

for row in l[0:1000]:
  print(row)

#Please don't run in the final one, because this will add all the friends.
i=0
for edge in G.edges():
  start=edge[0]
  end=edge[1]
  if start in users_dict:
    for network in users_dict[start]:
      if not (G.has_edge(network,end)):
        G.add_edge(network,end)
        i+=1
  if end in users_dict:
    for network in users_dict[end]:
      if not G.has_edge(network,start):
        G.add_edge(network,start)
        i+=1

i=0
for edge in G.edges():
  if i==1000:
    break
  start=edge[0]
  end=edge[1]
  if start in users_dict:
    for network in users_dict[start]:
      if not (G.has_edge(network,end)):
        G.add_edge(network,end)
        i+=1
        if i==1000:
          break
  if end in users_dict:
    for network in users_dict[end]:
      if not G.has_edge(network,start):
        G.add_edge(network,start)
        i+=1
        if i==1000:
          break

print(len(G.edges()))

print("Number of nodes",G.number_of_nodes())
print("Number of edges",G.number_of_edges())

get_id=int(input("Enter your user id: "))
get_min_rating=int(input("Enter the rating (from 1-5): "))
get_number=int(input("Enter the number of restaurants you want to view: "))

output=[]
distinct_values=[]
if get_id in users_dict:
  #iterate through edges, calculate jaccard coefficient with get_id, then for >0.8 values, get get_number restaurants
  edges=G.edges()
  for edge in edges:
    if get_id == edge[0]:
      search_for=edge[1]
    elif get_id == edge[1]:
      search_for=edge[0]
    for jaccard in nx.jaccard_coefficient(G, [(get_id, search_for)]):
      if jaccard[2] not in distinct_values:
        distinct_values.append(jaccard[2])
      if jaccard[2]>0.9:
        capture_data=[]
        ur_dict[search_for].sort()
        for pairs in ur_dict[search_for]:
          if pairs[0]>=get_min_rating and pairs not in output:
            output.append(pairs)


print(len(distinct_values))
print(distinct_values)

#output.sort(reverse=True)
print("You can visit the following restaurants: ")
for i in range(get_number):
  print(output[i][1])